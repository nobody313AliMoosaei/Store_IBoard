// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Store_IBoard.DL.ApplicationDbContext;

#nullable disable

namespace Store_IBoard.DL.Migrations
{
    [DbContext(typeof(Store_IBoard.DL.ApplicationDbContext.ApplicationDbContext))]
    [Migration("20240325220842_AddMaxLenghtToSendEmailSMSModel")]
    partial class AddMaxLenghtToSendEmailSMSModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Store_IBoard.DL.Entities.BasColor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int?>("ColorCode")
                        .HasColumnType("int");

                    b.Property<string>("EnglishColorName")
                        .HasMaxLength(220)
                        .HasColumnType("nvarchar(220)");

                    b.Property<string>("HexCode")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("PersianColorName")
                        .HasMaxLength(220)
                        .HasColumnType("nvarchar(220)");

                    b.HasKey("Id")
                        .HasName("PK__BasColor__3214EC07A064CB55");

                    b.HasIndex(new[] { "PersianColorName" }, "IX_BasColor_PersianName");

                    b.ToTable("BasColor", (string)null);
                });

            modelBuilder.Entity("Store_IBoard.DL.Entities.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CategoryName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id")
                        .HasName("PK__Category__3214EC07CAB36CD4");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("Store_IBoard.DL.Entities.Good", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("GoodDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoodName")
                        .HasMaxLength(650)
                        .HasColumnType("nvarchar(650)");

                    b.Property<long?>("GoodPrice")
                        .HasColumnType("bigint");

                    b.Property<long?>("GroupGoodRef")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("PK__Goods__3214EC07B9ED6410");

                    b.HasIndex("GroupGoodRef");

                    b.ToTable("Goods");
                });

            modelBuilder.Entity("Store_IBoard.DL.Entities.GoodsColor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("ColorRef")
                        .HasColumnType("bigint");

                    b.Property<long?>("GoodRef")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("PK__GoodsCol__3214EC077CEA16CD");

                    b.HasIndex("ColorRef");

                    b.HasIndex("GoodRef");

                    b.ToTable("GoodsColors");
                });

            modelBuilder.Entity("Store_IBoard.DL.Entities.GroupGood", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CategoryRef")
                        .HasColumnType("bigint");

                    b.Property<string>("GroupName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id")
                        .HasName("PK__GroupGoo__3214EC07D8E94B7D");

                    b.HasIndex("CategoryRef");

                    b.ToTable("GroupGoods");
                });

            modelBuilder.Entity("Store_IBoard.DL.Entities.Roles", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersianName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR",
                            PersianName = "ادمین"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "DefulatUser",
                            NormalizedName = "DEFULATUSER",
                            PersianName = "کاربر عادی"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "MiddLevelUser",
                            NormalizedName = "MIDDLEVELUSER",
                            PersianName = "کاربر سطح دو"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "TopLevelUser",
                            NormalizedName = "TOPLEVELUSER",
                            PersianName = "کاربر سطح سه"
                        });
                });

            modelBuilder.Entity("Store_IBoard.DL.Entities.SendEmailSMSModel", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(40)
                        .HasColumnType("VARCHAR");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Email" }, "IX_SendEmailSMSModel_Email");

                    b.HasIndex(new[] { "PhoneNumber" }, "IX_SendEmailSMSModel_PhoneNumber");

                    b.ToTable("SendEmailSMSModels");
                });

            modelBuilder.Entity("Store_IBoard.DL.Entities.Users", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NationalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Store_IBoard.DL.Entities.Good", b =>
                {
                    b.HasOne("Store_IBoard.DL.Entities.GroupGood", "GroupGoodRefNavigation")
                        .WithMany("Goods")
                        .HasForeignKey("GroupGoodRef")
                        .HasConstraintName("FK__Goods__GroupGood__3C69FB99");

                    b.Navigation("GroupGoodRefNavigation");
                });

            modelBuilder.Entity("Store_IBoard.DL.Entities.GoodsColor", b =>
                {
                    b.HasOne("Store_IBoard.DL.Entities.BasColor", "ColorRefNavigation")
                        .WithMany("GoodsColors")
                        .HasForeignKey("ColorRef")
                        .HasConstraintName("FK__GoodsColo__Color__412EB0B6");

                    b.HasOne("Store_IBoard.DL.Entities.Good", "GoodRefNavigation")
                        .WithMany("GoodsColors")
                        .HasForeignKey("GoodRef")
                        .HasConstraintName("FK__GoodsColo__GoodR__4222D4EF");

                    b.Navigation("ColorRefNavigation");

                    b.Navigation("GoodRefNavigation");
                });

            modelBuilder.Entity("Store_IBoard.DL.Entities.GroupGood", b =>
                {
                    b.HasOne("Store_IBoard.DL.Entities.Category", "CategoryRefNavigation")
                        .WithMany("GroupGoods")
                        .HasForeignKey("CategoryRef")
                        .HasConstraintName("FK__GroupGood__Categ__38996AB5");

                    b.Navigation("CategoryRefNavigation");
                });

            modelBuilder.Entity("Store_IBoard.DL.Entities.BasColor", b =>
                {
                    b.Navigation("GoodsColors");
                });

            modelBuilder.Entity("Store_IBoard.DL.Entities.Category", b =>
                {
                    b.Navigation("GroupGoods");
                });

            modelBuilder.Entity("Store_IBoard.DL.Entities.Good", b =>
                {
                    b.Navigation("GoodsColors");
                });

            modelBuilder.Entity("Store_IBoard.DL.Entities.GroupGood", b =>
                {
                    b.Navigation("Goods");
                });
#pragma warning restore 612, 618
        }
    }
}
